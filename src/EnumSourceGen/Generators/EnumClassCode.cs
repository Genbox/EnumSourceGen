using System.Globalization;
using System.Text;
using Genbox.EnumSourceGen.Misc;
using static Genbox.EnumSourceGen.Helpers.CodeGenHelper;

namespace Genbox.EnumSourceGen.Generators;

internal static class EnumClassCode
{
    internal static string Generate(EnumSpec enumSpec, StringBuilder sb)
    {
        sb.Clear();

        string? ns = enumSpec.EnumsClassNamespace == null ? null : "\nnamespace " + enumSpec.EnumsClassNamespace + ";\n";
        string en = enumSpec.EnumsClassName;
        string cn = enumSpec.EnumName;
        string sn = enumSpec.EnumFullyQualifiedName; //We always use FQN as the class name is the same as the enum name
        string vi = enumSpec.IsPublic ? "public" : "internal";
        string mc = enumSpec.Members.Count.ToString(NumberFormatInfo.InvariantInfo);
        string ut = enumSpec.UnderlyingType;
        string ef = enumSpec.EnumsClassNamespace + '.' + enumSpec.EnumName + "Format";

        string res = $$"""
// <auto-generated />
#nullable enable
{{ns}}
public static partial class {{en}}
{
    {{vi}} static partial class {{cn}}
    {
        public const int MemberCount = {{mc}};
        public const bool IsFlagEnum = {{enumSpec.HasFlags.ToString().ToLowerInvariant()}};

        private static string[]? _names;
        public static string[] GetMemberNames()
            => _names ??= new[] {
                {{GetMemberNames()}}
            };

        private static {{sn}}[]? _values;
        public static {{sn}}[] GetMemberValues()
            => _values ??= new[] {
                {{GetMemberValues()}}
            };

        private static {{ut}}[]? _underlyingValues;
        public static {{ut}}[] GetUnderlyingValues()
            => _underlyingValues ??= new {{ut}}[] {
                {{GetUnderlyingValues()}}
            };

        public static bool TryParse(string value, out {{sn}} result, {{ef}} format = {{ef}}.Default, IEqualityComparer<string?>? comparer = null)
        {
            comparer ??= StringComparer.Ordinal;
{{GetTryParseSwitch()}}

            result = default;
            return false;
        }

        public static {{sn}} Parse(string value, {{ef}} format = {{ef}}.Default, IEqualityComparer<string?>? comparer = null)
        {
            if (!TryParse(value, out {{sn}} result, format, comparer))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined({{sn}} input) => {{GetIsDefined(enumSpec, ut)}};
""";

        if (enumSpec.HasDisplay)
        {
            res +=
                $$"""


        private static ({{sn}}, string)[]? _displayNames;
        public static ({{sn}}, string)[] GetDisplayNames()
            => _displayNames ??= new [] {
                {{GetDisplayNames()}}
            };
""";
        }

        if (enumSpec.HasDescription)
        {
            res +=
                $$"""


        private static ({{sn}}, string)[]? _descriptions;
        public static ({{sn}}, string)[] GetDescriptions()
            => _descriptions ??= new[] {
                {{GetDescriptions()}}
            };
""";
        }

        string GetMemberNames()
        {
            sb.Clear();

            for (int i = 0; i < enumSpec.Members.Count; i++)
            {
                EnumMember enumVal = enumSpec.Members[i];
                sb.Append('"').Append(enumVal.Name).Append("\",\n").Append(Indent(4));
            }

            return sb.ToString().TrimEnd(CodeConstants.TrimChars);
        }

        string GetMemberValues()
        {
            sb.Clear();

            for (int i = 0; i < enumSpec.Members.Count; i++)
                sb.Append(sn).Append('.').Append(enumSpec.Members[i].Name).Append(",\n").Append(Indent(4));

            return sb.ToString().TrimEnd(CodeConstants.TrimChars);
        }

        string GetUnderlyingValues()
        {
            sb.Clear();

            for (int i = 0; i < enumSpec.Members.Count; i++)
                sb.Append(enumSpec.Members[i].Value).Append(",\n").Append(Indent(4));

            return sb.ToString().TrimEnd(CodeConstants.TrimChars);
        }

        string GetTryParseSwitch()
        {
            sb.Clear();

            sb.Append($$"""

            if (format.HasFlag({{ef}}.Name))
            {
""");

            for (int i = 0; i < enumSpec.Members.Count; i++)
            {
                EnumMember enumVal = enumSpec.Members[i];

                sb.Append($$"""

                if (comparer.Equals(value, "{{enumVal.Name}}"))
                {
                    result = {{sn}}.{{enumVal.Name}};
                    return true;
                }
""");

                if (i != enumSpec.Members.Count - 1)
                    sb.AppendLine();
            }

            sb.Append("\n            }");

            sb.Append($$"""

            if (format.HasFlag({{ef}}.Value))
            {
""");

            for (int i = 0; i < enumSpec.Members.Count; i++)
            {
                EnumMember enumVal = enumSpec.Members[i];

                sb.Append($$"""
                if (comparer.Equals(value, "{{enumVal.Value}}"))
                {
                    result = {{sn}}.{{enumVal.Name}};
                    return true;
                }
""");

                if (i != enumSpec.Members.Count - 1)
                    sb.AppendLine();
            }

            sb.Append("\n            }");

            if (enumSpec.HasDisplay)
            {
                sb.Append($$"""

            if (format.HasFlag({{ef}}.DisplayName))
            {
""");

                for (int i = 0; i < enumSpec.Members.Count; i++)
                {
                    EnumMember enumVal = enumSpec.Members[i];

                    if (enumVal.DisplayName != null)
                    {
                        sb.Append($$"""

                if (comparer.Equals(value, "{{enumVal.DisplayName}}"))
                {
                    result = {{sn}}.{{enumVal.Name}};
                    return true;
                }
""");
                    }
                    if (i != enumSpec.Members.Count - 1)
                        sb.AppendLine();
                }

                sb.Append("\n            }");
            }

            if (enumSpec.HasDescription)
            {
                sb.Append($$"""

            if (format.HasFlag({{ef}}.Description))
            {
""");

                for (int i = 0; i < enumSpec.Members.Count; i++)
                {
                    EnumMember enumVal = enumSpec.Members[i];

                    if (enumVal.Description != null)
                    {
                        sb.Append($$"""

                if (comparer.Equals(value, "{{enumVal.Description}}"))
                {
                    result = {{sn}}.{{enumVal.Name}};
                    return true;
                }
""");
                    }

                    if (i != enumSpec.Members.Count - 1)
                        sb.AppendLine();
                }

                sb.Append("\n            }");
            }

            return sb.ToString();
        }

        string GetDisplayNames()
        {
            sb.Clear();

            for (int i = 0; i < enumSpec.Members.Count; i++)
            {
                EnumMember enumVal = enumSpec.Members[i];

                if (enumVal.DisplayName == null)
                    continue;

                sb.Append('(').Append(sn).Append('.').Append(enumVal.Name).Append(", \"").Append(enumVal.DisplayName).Append("\"),\n").Append(Indent(4));
            }

            return sb.ToString().TrimEnd(CodeConstants.TrimChars);
        }

        string GetDescriptions()
        {
            sb.Clear();

            for (int i = 0; i < enumSpec.Members.Count; i++)
            {
                EnumMember enumVal = enumSpec.Members[i];

                if (enumVal.Description == null)
                    continue;

                sb.Append('(').Append(sn).Append('.').Append(enumVal.Name).Append(", \"").Append(enumVal.Description).Append("\"),\n").Append(Indent(4));
            }

            return sb.ToString().TrimEnd(CodeConstants.TrimChars);
        }

        string GetIsDefined(EnumSpec spec, string ut)
        {
            if (spec.Members.Count == 0)
                return "false";

            long value = 0;

            foreach (EnumMember member in spec.Members)
                value |= (long)Convert.ChangeType(member.Value, typeof(long));

            if (value == 0)
                return $"0 == ({ut})input";

            return "(0b" + Convert.ToString(value, 2) + $" & ({ut})input) == ({ut})input";
        }

        return res + "\n    }\n}";
    }
}