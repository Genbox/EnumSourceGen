// <auto-generated />
#nullable enable

namespace Genbox.EnumSourceGen;

public static partial class Enums
{
    public static partial class MyEnum
    {
        public const int MemberCount = 4;
        public const bool IsFlagEnum = true;

        private static string[]? _names;
        public static string[] GetMemberNames()
            => _names ??= new[] {
                "First",
                "Second",
                "Third",
                "Other"
            };

        private static Some.Namespace.Here.MyEnum[]? _values;
        public static Some.Namespace.Here.MyEnum[] GetMemberValues()
            => _values ??= new[] {
                Some.Namespace.Here.MyEnum.First,
                Some.Namespace.Here.MyEnum.Second,
                Some.Namespace.Here.MyEnum.Third,
                Some.Namespace.Here.MyEnum.Other
            };

        private static Int32[]? _underlyingValues;
        public static Int32[] GetUnderlyingValues()
            => _underlyingValues ??= new Int32[] {
                0,
                2,
                8,
                256
            };

        public static bool TryParse(string value, out Some.Namespace.Here.MyEnum result, StringComparison comparer = StringComparison.Ordinal)
        {
            if (string.Equals(value, "First", comparer))
            {
                result = Some.Namespace.Here.MyEnum.First;
                return true;
            }
            if (string.Equals(value, "Second", comparer))
            {
                result = Some.Namespace.Here.MyEnum.Second;
                return true;
            }
            if (string.Equals(value, "Third", comparer))
            {
                result = Some.Namespace.Here.MyEnum.Third;
                return true;
            }
            if (string.Equals(value, "Other", comparer))
            {
                result = Some.Namespace.Here.MyEnum.Other;
                return true;
            }

            result = default;
            return false;
        }

        public static Some.Namespace.Here.MyEnum Parse(string value, StringComparison comparer = StringComparison.Ordinal)
        {
            if (!TryParse(value, out Some.Namespace.Here.MyEnum result, comparer))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(Some.Namespace.Here.MyEnum input) => (0b100001010 & (Int32)input) == (Int32)input;
    }
}
// <auto-generated />
#nullable enable
using System.Diagnostics.CodeAnalysis;

namespace Some.Namespace.Here;

public static partial class MyEnumExtensions
{
    public static string GetString(this MyEnum value)
        => value switch
        {
            MyEnum.First => "First",
            MyEnum.Second => "Second",
            MyEnum.Third => "Third",
            MyEnum.Other => "Other",
            _ => value.ToString()
        };

    public static bool TryGetUnderlyingValue(this MyEnum value, out Int32 underlyingValue)
    {
        switch (value)
        {
            case MyEnum.First:
                underlyingValue = 0;
                return true;
            case MyEnum.Second:
                underlyingValue = 2;
                return true;
            case MyEnum.Third:
                underlyingValue = 8;
                return true;
            case MyEnum.Other:
                underlyingValue = 256;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Int32 GetUnderlyingValue(this MyEnum value)
    {
        if (!TryGetUnderlyingValue(value, out Int32 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }

    public static bool IsFlagSet(this MyEnum value, MyEnum flag)
        => ((Int32)value & (Int32)flag) == (Int32)flag;
}
