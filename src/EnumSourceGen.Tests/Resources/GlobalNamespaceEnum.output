// <auto-generated />

[Flags]
public enum MyEnumFormat : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable

public static partial class Enums
{
    public static partial class MyEnum
    {
        public const int MemberCount = 1;
        public const bool IsFlagEnum = false;

        private static string[]? _names;
        public static string[] GetMemberNames()
            => _names ??= new[] {
                "First"
            };

        private static MyEnum[]? _values;
        public static MyEnum[] GetMemberValues()
            => _values ??= new[] {
                MyEnum.First
            };

        private static Int32[]? _underlyingValues;
        public static Int32[] GetUnderlyingValues()
            => _underlyingValues ??= new Int32[] {
                0
            };

        public static bool TryParse(string value, out MyEnum result, MyEnumFormat format = MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {

            if (format.HasFlag(MyEnumFormat.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = MyEnum.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnumFormat.Value))
            {                if (value.Equals("0", comparison))
                {
                    result = MyEnum.First;
                    return true;
                }
            }

            result = default;
            return false;
        }

        public static bool TryParse(ReadOnlySpan<char> value, out MyEnum result, MyEnumFormat format = MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {

            if (format.HasFlag(MyEnumFormat.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = MyEnum.First;
                    return true;
                }
            }
            if (format.HasFlag(MyEnumFormat.Value))
            {                if (value.Equals("0", comparison))
                {
                    result = MyEnum.First;
                    return true;
                }
            }

            result = default;
            return false;
        }

        public static MyEnum Parse(ReadOnlySpan<char> value, MyEnumFormat format = MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static MyEnum Parse(string value, MyEnumFormat format = MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(MyEnum input) => 0 == (Int32)input;
    }
}
// <auto-generated />
#nullable enable
using System.Diagnostics.CodeAnalysis;

public static partial class MyEnumExtensions
{
    public static string GetString(this MyEnum value)
        => value switch
        {
            MyEnum.First => "First",
            _ => value.ToString()
        };

    public static bool TryGetUnderlyingValue(this MyEnum value, out Int32 underlyingValue)
    {
        switch (value)
        {
            case MyEnum.First:
                underlyingValue = 0;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Int32 GetUnderlyingValue(this MyEnum value)
    {
        if (!TryGetUnderlyingValue(value, out Int32 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
