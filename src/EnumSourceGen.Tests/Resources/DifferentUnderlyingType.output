// <auto-generated />

namespace Some.Namespace.Here;

[Flags]
public enum MyEnumFormat : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable

namespace Some.Namespace.Here;

public static partial class Enums
{
    public static partial class MyEnum
    {
        public const int MemberCount = 1;
        public const bool IsFlagEnum = false;

        private static string[]? _names;
        public static string[] GetMemberNames()
            => _names ??= new[] {
                "Value"
            };

        private static Some.Namespace.Here.MyEnum[]? _values;
        public static Some.Namespace.Here.MyEnum[] GetMemberValues()
            => _values ??= new[] {
                Some.Namespace.Here.MyEnum.Value
            };

        private static Byte[]? _underlyingValues;
        public static Byte[] GetUnderlyingValues()
            => _underlyingValues ??= new Byte[] {
                0
            };

        public static bool TryParse(string value, out Some.Namespace.Here.MyEnum result, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {

            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Name))
            {
                if (value.Equals("Value", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Value;
                    return true;
                }
            }
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Value))
            {                if (value.Equals("0", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Value;
                    return true;
                }
            }

            result = default;
            return false;
        }

        public static bool TryParse(ReadOnlySpan<char> value, out Some.Namespace.Here.MyEnum result, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {

            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Name))
            {
                if (value.Equals("Value", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Value;
                    return true;
                }
            }
            if (format.HasFlag(Some.Namespace.Here.MyEnumFormat.Value))
            {                if (value.Equals("0", comparison))
                {
                    result = Some.Namespace.Here.MyEnum.Value;
                    return true;
                }
            }

            result = default;
            return false;
        }

        public static Some.Namespace.Here.MyEnum Parse(ReadOnlySpan<char> value, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out Some.Namespace.Here.MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static Some.Namespace.Here.MyEnum Parse(string value, Some.Namespace.Here.MyEnumFormat format = Some.Namespace.Here.MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out Some.Namespace.Here.MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(Some.Namespace.Here.MyEnum input) => 0 == (Byte)input;
    }
}
// <auto-generated />
#nullable enable
using System.Diagnostics.CodeAnalysis;

namespace Some.Namespace.Here;

public static partial class MyEnumExtensions
{
    public static string GetString(this Some.Namespace.Here.MyEnum value)
        => value switch
        {
            Some.Namespace.Here.MyEnum.Value => "Value",
            _ => value.ToString()
        };

    public static bool TryGetUnderlyingValue(this Some.Namespace.Here.MyEnum value, out Byte underlyingValue)
    {
        switch (value)
        {
            case Some.Namespace.Here.MyEnum.Value:
                underlyingValue = 0;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Byte GetUnderlyingValue(this Some.Namespace.Here.MyEnum value)
    {
        if (!TryGetUnderlyingValue(value, out Byte underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
