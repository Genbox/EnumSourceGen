// <auto-generated />

[Flags]
public enum MyEnumFormat : byte
{
    None = 0,
    Name = 1,
    Value = 2,
    Default = Name | Value
}
// <auto-generated />
#nullable enable

public static partial class Enums
{
    internal static partial class MyEnum
    {
        public const int MemberCount = 4;
        public const bool IsFlagEnum = false;

        private static string[]? _names;
        public static string[] GetMemberNames()
            => _names ??= new[] {
                "NotFirst",
                "SECOND",
                "tHIRD",
                "Somethingher"
            };

        private static MyEnum[]? _values;
        public static MyEnum[] GetMemberValues()
            => _values ??= new[] {
                MyEnum.First,
                MyEnum.Second,
                MyEnum.Third,
                MyEnum.Other
            };

        private static Int32[]? _underlyingValues;
        public static Int32[] GetUnderlyingValues()
            => _underlyingValues ??= new Int32[] {
                2,
                3,
                4,
                5
            };

        public static bool TryParse(string value, out MyEnum result, MyEnumFormat format = MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {

            if (format.HasFlag(MyEnumFormat.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = MyEnum.First;
                    return true;
                }

                if (value.Equals("Second", comparison))
                {
                    result = MyEnum.Second;
                    return true;
                }

                if (value.Equals("Third", comparison))
                {
                    result = MyEnum.Third;
                    return true;
                }

                if (value.Equals("Other", comparison))
                {
                    result = MyEnum.Other;
                    return true;
                }
            }
            if (format.HasFlag(MyEnumFormat.Value))
            {
                if (value.Equals("2", comparison))
                {
                    result = MyEnum.First;
                    return true;
                }

                if (value.Equals("3", comparison))
                {
                    result = MyEnum.Second;
                    return true;
                }

                if (value.Equals("4", comparison))
                {
                    result = MyEnum.Third;
                    return true;
                }

                if (value.Equals("5", comparison))
                {
                    result = MyEnum.Other;
                    return true;
                }
            }

            result = default;
            return false;
        }

        public static bool TryParse(ReadOnlySpan<char> value, out MyEnum result, MyEnumFormat format = MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {

            if (format.HasFlag(MyEnumFormat.Name))
            {
                if (value.Equals("First", comparison))
                {
                    result = MyEnum.First;
                    return true;
                }

                if (value.Equals("Second", comparison))
                {
                    result = MyEnum.Second;
                    return true;
                }

                if (value.Equals("Third", comparison))
                {
                    result = MyEnum.Third;
                    return true;
                }

                if (value.Equals("Other", comparison))
                {
                    result = MyEnum.Other;
                    return true;
                }
            }
            if (format.HasFlag(MyEnumFormat.Value))
            {
                if (value.Equals("2", comparison))
                {
                    result = MyEnum.First;
                    return true;
                }

                if (value.Equals("3", comparison))
                {
                    result = MyEnum.Second;
                    return true;
                }

                if (value.Equals("4", comparison))
                {
                    result = MyEnum.Third;
                    return true;
                }

                if (value.Equals("5", comparison))
                {
                    result = MyEnum.Other;
                    return true;
                }
            }

            result = default;
            return false;
        }

        public static MyEnum Parse(ReadOnlySpan<char> value, MyEnumFormat format = MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static MyEnum Parse(string value, MyEnumFormat format = MyEnumFormat.Default, StringComparison comparison = StringComparison.Ordinal)
        {
            if (!TryParse(value, out MyEnum result, format, comparison))
                throw new ArgumentOutOfRangeException($"Invalid value: {value}");

            return result;
        }

        public static bool IsDefined(MyEnum input) => Enum.IsDefined(typeof(MyEnum), input);
    }
}
// <auto-generated />
#nullable enable
using System.Diagnostics.CodeAnalysis;

internal static partial class MyEnumExtensions
{
    public static string GetString(this MyEnum value)
        => value switch
        {
            MyEnum.OmitWithFilter => "OmitWithFilter",
            MyEnum.First => "First",
            MyEnum.Second => "Second",
            MyEnum.Third => "Third",
            MyEnum.Other => "Other",
            _ => value.ToString()
        };

    public static bool TryGetUnderlyingValue(this MyEnum value, out Int32 underlyingValue)
    {
        switch (value)
        {
            case MyEnum.First:
                underlyingValue = 2;
                return true;
            case MyEnum.Second:
                underlyingValue = 3;
                return true;
            case MyEnum.Third:
                underlyingValue = 4;
                return true;
            case MyEnum.Other:
                underlyingValue = 5;
                return true;
        }
        underlyingValue = default;
        return false;
    }

    public static Int32 GetUnderlyingValue(this MyEnum value)
    {
        if (!TryGetUnderlyingValue(value, out Int32 underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
}
