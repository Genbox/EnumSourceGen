using System.Text;
using Genbox.EnumSourceGen.Data;
using Genbox.EnumSourceGen.Helpers;

namespace Genbox.EnumSourceGen.Generators;

internal static class EnumExtensionCode
{
    public static string Generate(EnumSpec es, StringBuilder sb)
    {
        sb.Clear();

        EnumSourceGenData op = es.SourceGenData;

        string? ns = op.ExtensionClassNamespace ?? es.Namespace;
        string cn = op.EnumNameOverride ?? es.Name;
        string en = op.ExtensionClassName ?? cn + "Extensions";
        string sn = es.FullyQualifiedName;
        string vi = es.IsPublic ? "public" : "internal";
        string ut = es.UnderlyingType;

        string res = $$"""
// <auto-generated />
#nullable enable
using System.Diagnostics.CodeAnalysis;
{{(ns != null ? "\nnamespace " + ns + ";\n" : null)}}
{{vi}} static partial class {{en}}
{
    public static string GetString(this {{sn}} value)
        => value switch
        {
            {{GetString()}}
            _ => value.ToString()
        };

    public static bool TryGetUnderlyingValue(this {{sn}} value, out {{ut}} underlyingValue)
    {
        switch (value)
        {
{{TryGetUnderlyingValue()}}
        }
        underlyingValue = default;
        return false;
    }

    public static {{ut}} GetUnderlyingValue(this {{sn}} value)
    {
        if (!TryGetUnderlyingValue(value, out {{ut}} underlyingValue))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return underlyingValue;
    }
""";

        if (es.HasDisplay)
        {
            res += $$"""


    public static bool TryGetDisplayName(this {{sn}} value, [NotNullWhen(true)]out string? displayName)
    {
        switch (value)
        {
{{TryGetDisplayName()}}
        }
        displayName = null;
        return false;
    }

    public static string GetDisplayName(this {{sn}} value)
    {
        if (!TryGetDisplayName(value, out string? displayName))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return displayName;
    }
""";
        }

        if (es.HasDescription)
        {
            res += $$"""


    public static bool TryGetDescription(this {{sn}} value, [NotNullWhen(true)]out string? description)
    {
        switch (value)
        {
{{TryGetDescription()}}
        }
        description = null;
        return false;
    }

    public static string GetDescription(this {{sn}} value)
    {
        if (!TryGetDescription(value, out string? description))
            throw new ArgumentOutOfRangeException($"Invalid value: {value}");

        return description;
    }
""";
        }

        if (es.HasFlags)
        {
            res += $$"""


    public static bool IsFlagSet(this {{sn}} value, {{sn}} flag)
        => (({{ut}})value & ({{ut}})flag) == ({{ut}})flag;
""";
        }

        string GetString()
        {
            sb.Clear();

            foreach (EnumMember em in es.Members)
            {
                if (em.OmitValueData != null && !em.OmitValueData.Exclude.HasFlag(EnumOmitExclude.GetString))
                {
                    sb.Append(sn).Append('.').Append(em.Name).Append(" => string.Empty,\n            ");
                    continue;
                }

                string transformed = TransformHelper.TransformName(em);

                sb.Append(sn).Append('.').Append(em.Name).Append(" => \"").Append(transformed).Append("\",\n            ");
            }

            return sb.ToString().TrimEnd();
        }

        string TryGetUnderlyingValue()
        {
            sb.Clear();

            for (int i = 0; i < es.Members.Count; i++)
            {
                EnumMember em = es.Members[i];

                if (em.OmitValueData != null && !em.OmitValueData.Exclude.HasFlag(EnumOmitExclude.TryGetUnderlyingValue))
                    continue;

                sb.Append($$"""
            case {{sn}}.{{em.Name}}:
                underlyingValue = {{em.Value}};
                return true;
""");

                if (i != es.Members.Count - 1)
                    sb.AppendLine();
            }

            return sb.ToString();
        }

        string TryGetDisplayName()
        {
            sb.Clear();

            for (int i = 0; i < es.Members.Count; i++)
            {
                EnumMember em = es.Members[i];

                if (em.OmitValueData != null && !em.OmitValueData.Exclude.HasFlag(EnumOmitExclude.TryGetDisplayName))
                    continue;

                if (em.DisplayData?.Name == null)
                    continue;

                sb.Append($$"""
            case {{sn}}.{{em.Name}}:
                displayName = "{{em.DisplayData.Name}}";
                return true;
""");

                if (i != es.Members.Count - 1)
                    sb.AppendLine();
            }

            return sb.ToString();
        }

        string TryGetDescription()
        {
            sb.Clear();

            for (int i = 0; i < es.Members.Count; i++)
            {
                EnumMember em = es.Members[i];

                if (em.OmitValueData != null && !em.OmitValueData.Exclude.HasFlag(EnumOmitExclude.TryGetDescription))
                    continue;

                if (em.DisplayData?.Description == null)
                    continue;

                sb.Append($$"""
            case {{sn}}.{{em.Name}}:
                description = "{{em.DisplayData.Description}}";
                return true;
""");

                if (i != es.Members.Count - 1)
                    sb.AppendLine();
            }

            return sb.ToString();
        }

        return res + "\n}";
    }
}